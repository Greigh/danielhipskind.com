#!/bin/bash

# Exit on error and undefined variables
set -eu
trap 'echo "Error on line $LINENO. Exit code: $?" >&2' ERR

# Verify required commands
for cmd in rsync tree ln mkdir; do
    if ! command -v $cmd &> /dev/null; then
        echo "Required command not found: $cmd"
        exit 1
    fi
done

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Log helper functions
# Replace the log functions with these updated versions
log_success() {
    # Only log success if DEBUG is set
    if [ "${DEBUG:-}" = "1" ]; then
        echo -e "${GREEN}✓ $1${NC}"
    fi
}
log_error() { echo -e "${RED}✗ $1${NC}"; }
log_info() {
    # Only log info if DEBUG is set
    if [ "${DEBUG:-}" = "1" ]; then
        echo -e "${BLUE}ℹ $1${NC}"
    fi
}
log_warn() { echo -e "${YELLOW}! $1${NC}"; }

# Add this after the log functions
# Set DEBUG=1 to see all messages
DEBUG=${DEBUG:-0}

# Verify we're in the correct directory and has required files
required_files=("package.json" "server.js" "assets")
for file in "${required_files[@]}"; do
    if [ ! -e "$file" ]; then
        log_error "Required file/directory not found: $file"
        exit 1
    fi
done

# Create backup (excluding existing backups)
backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
log_info "Creating backup in $backup_dir..."
mkdir -p "$backup_dir"

# Count files with matching exclusions
count_files() {
    local dir=$1
    find "$dir" -type f \
        -not -path "*/backup_*" \
        -not -path "*/node_modules/*" \
        -not -path "*/.git/*" \
        -not -path "*/scripts/reorganize.sh" \
        | wc -l
}

# Update backup command with exclusions
rsync -av \
    --exclude="backup_*" \
    --exclude="node_modules" \
    --exclude=".git" \
    --exclude="scripts/reorganize.sh" \
    . "$backup_dir/"

# Verify backup completeness
if [ ! -d "$backup_dir" ] || [ "$(ls -A "$backup_dir" 2>/dev/null)" = "" ]; then
    log_error "Backup failed or is empty"
    exit 1
fi

# Count files in backup and source with same exclusions
backup_files=$(count_files "$backup_dir")
source_files=$(count_files ".")

if [ "$backup_files" -lt "$source_files" ]; then
    log_warn "Backup may be incomplete: $backup_files files vs $source_files source files"
    log_info "This excludes: backup_*, node_modules, .git, and scripts/reorganize.sh"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

log_success "Created full backup"
log_success "Backup verified"

# Backup the reorganization script itself
if [ -f "scripts/reorganize.sh" ]; then
    mkdir -p "$backup_dir/scripts"
    cp scripts/reorganize.sh "$backup_dir/scripts/reorganize.sh.bak"
    log_success "Backed up reorganization script"
fi

# Clean existing symlinks
find . -type l -delete

# Create directory structure
log_info "Creating directory structure..."
dirs=(
    # Source directories
    "src/pages/privacy"
    "src/js/core"
    "src/js/analytics"
    "src/js/managers"
    "src/js/utils"
    "src/js/components"
    "src/css/base"
    "src/css/components"
    "src/css/pages"
    "src/assets/images"
    "src/assets/icons"
    "src/assets/fonts"
    "src/assets/data"

    # Public directories
    "public/assets"
    "public/js"
    "public/css"

    # Visual RSS Feed Project directories
    "src/projects/visual-rss-feed/frontend"
    "src/projects/visual-rss-feed/public/css"
    "src/projects/visual-rss-feed/public/images"
    "src/projects/visual-rss-feed/public/js"
    "public/projects/visual-rss-feed/css"
    "public/projects/visual-rss-feed/images"
    "public/projects/visual-rss-feed/js"
    "projects/visual-rss-feed/public"
    "projects/visual-rss-feed/frontend"

    # Views directories
    "views/projects/visual-rss-feed/public"
    "views/projects/visual-rss-feed/partials"
    "html/assets"
    "html/assets/js"
    "html/assets/css"
    "html/assets/images"
    "html/assets/icons"

    # API directories
    "api/config"
    "api/data/articles"
    "api/middleware"
    "api/routes"
    "api/services"
    "api/utils"

    # Config and documentation
    "config"
    "docs"
    "tests/unit"
    "tests/integration"
    "tests/e2e"
    "scripts/deploy"
    "scripts/build"
)

for dir in "${dirs[@]}"; do
    mkdir -p "$dir" && log_success "Created $dir"
done

# Move files function with better error handling
move_files() {
    local source=$1
    local dest=$2
    if [ -e "$source" ]; then
        mkdir -p "$dest"
        if cp -rf "$source" "$dest/"; then
            log_success "Copied $source to $dest"
            return 0
        else
            log_error "Failed to copy: $source"
            return 1
        fi
    else
        log_warn "Source not found: $source (this may be expected)"
        return 0
    fi
}

# Move JavaScript files
log_info "Moving JavaScript files..."
js_files=(
    "assets/js/config.js:src/js/core/"
    "assets/js/theme.js:src/js/core/"
    "assets/js/cacheManager.js:src/js/core/"
    "assets/js/analytics.js:src/js/analytics/"
    "assets/js/content.js:src/js/core/"
    "assets/js/icons.js:src/js/core/"
    "assets/js/performanceMonitor.js:src/js/utils/"
    "assets/js/utils/debug.js:src/js/utils/"
    "assets/js/visitorLogger.js:src/js/utils/"
    "analytics/js/auth.js:src/js/analytics/"
    "analytics/js/analytics.js:src/js/analytics/"
    "analytics/js/crypto.js:src/js/analytics/"
    "analytics/js/tokenManager.js:src/js/analytics/"
    "analytics/js/utils/crypto.js:src/js/utils/"
    "assets/js/index.js:src/js/"
)

for file in "${js_files[@]}"; do
    IFS=':' read -r source dest <<< "$file"
    move_files "$source" "$dest"
done

# Move manager files
for manager in project skill icon content observer navigation; do
    move_files "assets/js/${manager}Manager.js" "src/js/managers/"
done

# Move CSS files
log_info "Moving CSS files..."
css_files=(
    "assets/css/style.css:src/css/base/"
    "assets/css/media-queries.css:src/css/base/"
    "assets/css/opt-out.css:src/css/pages/"
    "analytics/css/analytics.css:src/css/components/"
)

for file in "${css_files[@]}"; do
    IFS=':' read -r source dest <<< "$file"
    move_files "$source" "$dest"
done

# Move assets
log_info "Moving assets..."
if [ -d "assets/images" ]; then
    mkdir -p "src/assets/images"
    cp -r assets/images/* src/assets/images/ 2>/dev/null || true
    log_success "Moved images"
fi

if [ -d "assets/images/icons" ]; then
    mkdir -p "src/assets/icons"
    cp -r assets/images/icons/* src/assets/icons/ 2>/dev/null || true
    log_success "Moved icons"
fi

if [ -d "assets/data" ]; then
    mkdir -p "src/assets/data"
    cp -r assets/data/* src/assets/data/ 2>/dev/null || true
    log_success "Moved data files"
fi

# Move Visual RSS Feed project files
log_info "Moving Visual RSS Feed project files..."
project_files=(
    "public/projects/visual-rss-feed/favicon-128.png:src/projects/visual-rss-feed/public/images/"
    "public/projects/visual-rss-feed/favicon-256.png:src/projects/visual-rss-feed/public/images/"
    "public/projects/visual-rss-feed/favicon.svg:src/projects/visual-rss-feed/public/images/"
    "public/projects/visual-rss-feed/no-image.jpg:src/projects/visual-rss-feed/public/images/"
    "public/projects/visual-rss-feed/css/styles.css:src/projects/visual-rss-feed/public/css/"
)

for file in "${project_files[@]}"; do
    IFS=':' read -r source dest <<< "$file"
    if [ -f "$source" ]; then
        mkdir -p "$dest"
        cp "$source" "$dest" && log_success "Copied: $source to $dest"
    else
        log_error "Source file not found: $source"
    fi
done

# Move config files
move_files "serve.json" "config/"

# Add before symlink creation
log_info "Creating required source directories..."
source_dirs=(
    "src/js"
    "src/css"
    "src/assets/images"
    "src/assets/icons"
)

for dir in "${source_dirs[@]}"; do
    mkdir -p "$dir"
    log_success "Created source directory: $dir"
done

# Create symlinks
log_info "Creating symlinks..."
symlinks=(
    # Public directory symlinks
    "public/js:../src/js"
    "public/css:../src/css"
    "public/assets:../src/assets"

    # HTML assets symlinks
    "html/assets/js:../../src/js"
    "html/assets/css:../../src/css"
    "html/assets/images:../../src/assets/images"
    "html/assets/icons:../../src/assets/icons"

    # Visual RSS Feed project symlinks
    "projects/visual-rss-feed/public/js:../../../src/js"
    "projects/visual-rss-feed/public/css:../../../src/css"
    "projects/visual-rss-feed/public/images:../../../src/assets/images"
    "projects/visual-rss-feed/public/icons:../../../src/assets/icons"

    # Views project symlinks
    "views/projects/visual-rss-feed/public/js:../../../../src/js"
    "views/projects/visual-rss-feed/public/css:../../../../src/css"
    "views/projects/visual-rss-feed/public/images:../../../../src/assets/images"
    "views/projects/visual-rss-feed/public/icons:../../../../src/assets/icons"
)

for link in "${symlinks[@]}"; do
    IFS=':' read -r target source <<< "$link"
    mkdir -p "$(dirname "$target")"
    # Create relative symlink
    (cd "$(dirname "$target")" && ln -sf "$source" "$(basename "$target")") && \
        log_success "Created symlink: $target -> $source" || \
        log_error "Failed to create symlink: $target"
done

# Create documentation
log_info "Creating documentation..."
docs=(
    "docs/README.md:# Project Documentation"
    "docs/ARCHITECTURE.md:# Project Architecture"
    "docs/COMPONENTS.md:# Components Guide"
    "docs/ANALYTICS.md:# Analytics Implementation"
)

for doc in "${docs[@]}"; do
    IFS=':' read -r file content <<< "$doc"
    if [ ! -f "$file" ]; then
        echo "$content" > "$file"
        log_success "Created $file"
    fi
done

# Clean up duplicate icons
log_info "Cleaning up duplicate icons..."
if [ -d "src/assets/images/icons" ]; then
    rm -rf src/assets/images/icons
    log_success "Removed duplicate icons"
fi

# Final verification
log_info "Running final verification..."

# Verify critical directories
critical_dirs=(
    # Source directories
    "src/js/core"
    "src/js/analytics"
    "src/css/base"
    "src/assets/images"
    "src/assets/icons"

    # Project directories
    "src/projects/visual-rss-feed/frontend"
    "projects/visual-rss-feed/public"
    "views/projects/visual-rss-feed/public"
    "html/assets"

    # API directories
    "api/config"
    "api/services"
    "api/routes"
)

for dir in "${critical_dirs[@]}"; do
    if [ ! -d "$dir" ]; then
        log_error "Critical directory missing: $dir"
    else
        log_success "Verified: $dir"
    fi
done

for link in "${symlinks[@]}"; do
    IFS=':' read -r target source <<< "$link"
    if [ ! -L "$target" ]; then
        log_error "Symlink missing: $target"
    else
        target_path="$(cd "$(dirname "$target")" && pwd)/$(basename "$target")"
        source_path="$(cd "$(dirname "$target")" && cd "$(dirname "$source")" && pwd)/$(basename "$source")"
        if [ ! -e "$source_path" ]; then
            log_error "Symlink target does not exist: $target -> $source_path"
        else
            log_success "Verified symlink: $target -> $source"
        fi
    fi
done

# Final cleanup
log_info "Cleaning up empty directories..."
find . -type d -empty -not -path "*/\.*" -delete 2>/dev/null || true

# Print reorganization summary
log_info "Reorganization Summary"
echo "═══════════════════════════════════════════"
echo "Source Directory Structure:"
echo "├── src/"
if [ -d "src" ]; then
    tree -L 3 src/
else
    echo "src/ directory not found"
fi

echo "═══════════════════════════════════════════"
echo "Public Assets:"
echo "├── public/"
if [ -d "public" ]; then
    ls -la public/
else
    echo "public/ directory not found"
fi

echo "└── html/assets/"
if [ -d "html/assets" ]; then
    ls -la html/assets/
else
    echo "html/assets/ directory not found"
fi

echo "═══════════════════════════════════════════"
echo "Project Structure:"
echo "├── projects/"
if [ -d "projects" ]; then
    tree -L 3 projects/
else
    echo "projects/ directory not found"
fi

echo "└── views/"
if [ -d "views" ]; then
    tree -L 3 views/
else
    echo "views/ directory not found"
fi

echo "═══════════════════════════════════════════"
echo "API Structure:"
echo "└── api/"
if [ -d "api" ]; then
    tree -L 2 api/
else
    echo "api/ directory not found"
fi

echo "═══════════════════════════════════════════"
log_success "Reorganization complete!"
log_info "Backup created in: $backup_dir"
log_info "To restore from backup while preserving this script:"
echo "1. cp -r $backup_dir/* ."
echo "2. If needed: cp $backup_dir/scripts/reorganize.sh.bak scripts/reorganize.sh"